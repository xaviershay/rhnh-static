---
layout: post
title:  "Integration testing with Cucumber, RSpec and Thinking Sphinx"
date:   2008-10-01 06:11:00 +00:00
tags:   ["code", "cucumber", "integration", "rails", "rr", "rspec", "ruby", "sphinx", "testing"]
---
{% raw %}
Ideally you would want to include sphinx in your integration tests. It's really just like your database. In practice, this is problematic. Ensuring the DB is started and triggering a re-index after each model load is doable, if slow, with a small bit of hacking of thinking sphinx (hint - change the initializer for the @ThinkingSphinx::Configuration@ to allow you to specify the environment). Here's the rub though - if you're using transactional fixtures the sphinx indexer won't be able to see any of your data! Turning that off can really slow down your tests, and once you add in the re-indexing time you're going to be making a few cups of coffee while they run.

One approach I've been taking is to stub out the @search@ methods with "RR":http://github.com/btakita/rr/tree/master. I know, I know, stubbing in your integration tests is evil. I'm being pragmatic here. For most applications your search is trivial (find me results for this keyword), and if you unit test your @define_index@ block you're pretty well covered. To go one step further you could unit test your controllers with an expect on the search method, or have a separate suite of non-transactional integration tests running against sphinx. I like the latter, but haven't done it yet.

Enough talk! Here's the magic you need to get it working with "cucumber":http://github.com/aslakhellesoy/cucumber/tree/master:

--- Ruby
# features/steps/env.rb
require 'rr'
Cucumber::Rails::World.send(:include, RR::Adapters::RRMethods)

# features/steps/*_steps.rb
Given /a car with model '(\w+)' exists/ do |model|
  car = Car.create!(:model => model)
  stub(Car).search(model) { [car] }
end
---
{% endraw %}
