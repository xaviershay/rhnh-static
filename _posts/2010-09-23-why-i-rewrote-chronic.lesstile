---
layout: post
title:  "Why I Rewrote Chronic"
date:   2010-09-23 09:28:41 +00:00
tags:   ["code", "rails", "ruby"]
---
{% raw %}
It seems like a pretty epic yak shave. If you want to parse natural language dates in ruby, you use Chronic. That's just how it is. (There's also Tickle for recurring dates, which is similar, but based on Chronic anyways.) It's the standard, everyone uses it, so why oh why did I write my own version from scratch?

Three reasons I can see.

*Chronic is unmaintained.* Check the network graph for Chronic. A more avid historian could turn this into an epic teledrama, but for now here's the summary: The main repository hasn't had a commit since late 2008. Evaryont made a valiant attempt to take the reins, but his stamina only lasted an extra year to August 2009. Since then numerous people have forked his efforts, mostly to add 1.9 support. These efforts are fragmented though. The inertia of such a large project with no clear leadership sees every man running for himself.

Further, the new maintainers aren't providing a rock solid base. From Evaryont's README:
_I decided on my own volition that the 40-some (as reported by Github) network should be merged together. I got it to run, but *quite haphazardly*. There are a lot of new features (*mostly undocumented* except the git logs) so be a little flexible in your language passed to Chronic._ [emphasis mine]

This does not fill me with confidence.

*Chronic has a large barrier to entry.* Natural date parsing is a big challenge. In the original README, there are ~50 examples of formats it supports, and that is excluding all of the features added in forks in the last two years. The result is a large code base which is intimidating for a new comer, especially with no high level guidance as to how everything fits together. On a project of this size, "the documentation is in the specs" is insufficient. I know what it *does*, I need to know *how* it does it.

*Chronic solves the wrong problem.* I want an alternative to date pickers. As such, I don't need time support, and I only need very simple day parsing. Chronic seems geared towards a calendar type application ("tomorrow at 6:45pm"), but also parses many expressions which simply are not useful in a real application either because they are obtuse --- "7 hours before tomorrow at noon" --- or just not how users think about dates --- "3 months ago saturday at 5:00 pm". (Note the last assertion is a totally unsubstantiated claim with no user research to support it.)

Further, it is not hard to find simple examples that Chronic doesn't support. Omitting a year is an easy one: 14 Sep, April 9.

h2. So what to do?

Chronic needs a leader. Chronic neads a hero. One man to reunite the forks, document the code, and deliver it to the promised land. 

I am not that man.

I sketched out the formats I actually needed to support for my application, looked at it and thought "really it can't be that hard". Natural date parsing is hard; parsing only the dates your application requires is easy. One hour later I had a gem that not only had 100% support for all of the Chronic features I had been using, but also covered some extra formats I wanted ("14 Sep"), and could also convert a date _back_ into a human readable description. That's less time than I had already sunk into trying to get Chronic working.

"Introducing Kronic.":http://github.com/xaviershay/kronic

Less than 100 lines of code, totally specced, totally solved my problem. Ultimately, I don't want to deal with this problem, so I wanted the easiest solution. While patching Chronic would intuitively appear to be pragmatic, a quick spike in the other direction turned out to be worthwhile. Sometimes 80% just isn't that hard.

{% endraw %}
