---
layout: post
title:  "Ruby debugging with puts, tap and Hirb"
date:   2009-12-29 00:27:00 +00:00
tags:   ["code", "hirb", "rails", "ruby", "testing"]
---
{% raw %}
I use @puts@ heaps when debugging. Combined with @tap@, it's pretty handy. You can jump right in the middle of a method chain without having to move things around into variables.

--- Ruby
x = long.chain.of.methods.tap {|x| puts x }.to.do.something.with
---

I thought hey why don't I merge the two? And for bonus points, add in Hirb's table display to format my models nicely. These are fairly personal customizations, and aren't specific to a project, so I put them in my own @~/.railsrc@ file rather than each project.

--- Ruby
# config/initializers/developer_specific_customizations.rb
if %w(development test).include?(Rails.env)
  railsrc = "#{ENV['HOME']}/.railsrc"
  load(railsrc) if File.exist?(railsrc)
end

# ~/.railsrc
require 'hirb'

Hirb.enable :pager => false

class Object
  def tapp(prefix = nil, &block)
    block ||= lambda {|x| x }

    tap do |x|
      value = block[x]
      value = Hirb::View.formatter.format_output(value) || value.inspect

      if prefix
        print prefix
        if value.lines.count > 1
          print ":\n"
        else
          print ": "
        end
      end
      puts value
    end
  end
end

# Usage (in your spec files, perhaps?)
"hello".tapp           # => hello
"hello".tapp('a')      # => a - "hello
"hello".tapp(&:length) # => 5
MyModel.first.tapp # =>
#  +----+-------------------------+
#  | id | created_at              |
#  +----+-------------------------+
#  | 7  | 2009-12-29 00:15:56 UTC |
#  +----+-------------------------+
#  1 row in set
---
{% endraw %}
